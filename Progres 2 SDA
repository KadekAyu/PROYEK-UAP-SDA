import tkinter as tk
from PIL import Image, ImageTk
import tkinter.font as tkFont
import csv
from datetime import datetime

class Skor(tk.Frame):
    def __init__(self, root, app):
        self.root = root
        self.app = app
        self.root.geometry("1000x600")
        self.root.resizable(False, False)

        self.running = False
        self.time_elapsed = 0
        self.label_timer_blue = None  

        self.scores = {"Red": 0, "Blue": 0}

        self.frame_u = tk.Frame(root, bg="white")
        self.frame_u.pack(fill="both", expand=True)

        self.frame_head = tk.Frame(self.frame_u, bg="black")
        self.frame_head.pack(side="top", fill="both", expand=False)

        self.tampilkan_div()

        self.frame_Ao = tk.Frame(self.frame_u, bg="blue", width=500, height=480)
        self.frame_Ao.pack(side="left", fill="both", expand=True)

        self.frame_Aka = tk.Frame(self.frame_u, bg="red", width=500, height=480)
        self.frame_Aka.pack(side="right", fill="both", expand=True)

        self.tampilkan_gambar_flag()
        self.tampilkan_flag_ao()
        self.tampilkan_flag_aka()
        self.tampilkan_stopwatch()
        self.tampilkan_stopwatch_aka()

        self.frame_bawahAo = tk.Frame(self.frame_Ao, bg="blue")
        self.frame_bawahAo.pack(side="bottom", fill="both", expand=False)

        self.frame_bawahAka = tk.Frame(self.frame_Aka, bg="red")
        self.frame_bawahAka.pack(side="bottom", fill="both", expand=False)

        self.tampilan_btn_foot()

    def tampilkan_flag_ao(self):
        frame_horizontal_ao = tk.Frame(self.frame_Ao, bg="blue")
        frame_horizontal_ao.pack(pady=0)

        frame_angka_button_ao = tk.Frame(frame_horizontal_ao, bg="blue")
        frame_angka_button_ao.pack(side="left", padx=10)

        self.label_score_blue = tk.Label(frame_angka_button_ao, text="0", font=("Helvetica", 150), bg="blue", fg="white")
        self.label_score_blue.pack()

        frame_tombol = tk.Frame(frame_angka_button_ao, bg="blue")
        frame_tombol.pack(pady=0)

        tk.Button(frame_tombol, text="+1", font=("Helvetica", 14), bg="green", fg="white",
                  command=lambda: self.update_score("Blue", 1)).pack(side="left", padx=5)
        tk.Button(frame_tombol, text="-1", font=("Helvetica", 14), bg="blue", fg="white",
                  command=lambda: self.update_score("Blue", -1)).pack(side="left", padx=5)

        tk.Label(frame_horizontal_ao, image=self.photos[0], bg="white").pack(side="right", padx=5)

    def tampilkan_flag_aka(self):
        frame_horizontal_aka = tk.Frame(self.frame_Aka, bg="red")
        frame_horizontal_aka.pack(pady=0)

        frame_angka_button_aka = tk.Frame(frame_horizontal_aka, bg="red")
        frame_angka_button_aka.pack(side="left", padx=10)

        self.label_score_red = tk.Label(frame_angka_button_aka, text="0", font=("Helvetica", 150), bg="red", fg="white")
        self.label_score_red.pack()

        frame_tombol_aka = tk.Frame(frame_angka_button_aka, bg="red")
        frame_tombol_aka.pack(pady=0)

        tk.Button(frame_tombol_aka, text="+1", font=("Helvetica", 14), bg="green", fg="white",
                  command=lambda: self.update_score("Red", 1)).pack(side="left", padx=5)
        tk.Button(frame_tombol_aka, text="-1", font=("Helvetica", 14), bg="blue", fg="white",
                  command=lambda: self.update_score("Red", -1)).pack(side="left", padx=5)

        tk.Label(frame_horizontal_aka, image=self.photos[1], bg="white").pack(side="right", padx=10)

    def tampilkan_stopwatch(self):
        frame_for_stopwatch = tk.Frame(self.frame_Ao, bg="blue", width=350, height=150)
        frame_for_stopwatch.pack()
        frame_for_stopwatch.pack_propagate(False)

        frame_stopwatch = tk.Frame(frame_for_stopwatch, bg="#2F4F4F", width=300, height=150,
                                highlightbackground="white", highlightthickness=1)
        frame_stopwatch.pack(side="right", pady=30)
        frame_stopwatch.pack_propagate(False)

        self.label_timer_blue = tk.Label(frame_stopwatch, text="00 : 00", font=("Consolas", 48), fg="white", bg="#2F4F4F")
        self.label_timer_blue.pack(expand=True, fill="both")

        # Tombol START dan STOP
        frame_btn = tk.Frame(frame_for_stopwatch, bg="blue")
        frame_btn.pack(side="left", padx=10)

        tk.Button(frame_btn, text="Start", font=("Helvetica", 12), bg="green", fg="white",
                command=self.start_stopwatch).pack(pady=5)

        tk.Button(frame_btn, text="Stop", font=("Helvetica", 12), bg="red", fg="white",
                command=self.stop_stopwatch).pack(pady=5)

    def tampilkan_stopwatch_aka(self):
        frame_for_stopwatch_aka = tk.Frame(self.frame_Aka, bg="red", width=350, height=150)
        frame_for_stopwatch_aka.pack()
        frame_for_stopwatch_aka.pack_propagate(False)

        frame_stopwatch_aka = tk.Frame(frame_for_stopwatch_aka, bg="#2F4F4F", width=300, height=150,
                                highlightbackground="white", highlightthickness=1)
        frame_stopwatch_aka.pack(side="right", pady=30)
        frame_stopwatch_aka.pack_propagate(False)

        self.label_timer_aka = tk.Label(frame_stopwatch_aka, text="00 : 00", font=("Consolas", 48), fg="white", bg="#2F4F4F")
        self.label_timer_aka.pack(expand=True, fill="both")

        # Tombol START dan STOP
        frame_btn_aka = tk.Frame(frame_for_stopwatch_aka, bg="red")
        frame_btn_aka.pack(side="left", padx=10)

        tk.Button(frame_btn_aka, text="Start", font=("Helvetica", 12), bg="green", fg="white",
                command=self.start_stopwatch).pack(pady=5)

        tk.Button(frame_btn_aka, text="Stop", font=("Helvetica", 12), bg="red", fg="white",
                command=self.stop_stopwatch).pack(pady=5)
        
    def tampilan_btn_foot(self):
        btn0aka = tk.Button(self.frame_bawahAka, text="Done", font=("Helvetica", 14), bg="red", fg="white",
                       command=self.done_and_save)  # Ganti command
        btn0aka.pack(side="left", pady=5, padx=5)

        btn1aka = tk.Button(self.frame_bawahAka, text="Shikaku", font=("Helvetica", 14), bg="red", fg="white")
        btn1aka.pack(side="left", pady=5, padx=5)

        btn2aka = tk.Button(self.frame_bawahAka, text="Kikken", font=("Helvetica", 14), bg="red", fg="white")
        btn2aka.pack(side="left", pady=5, padx=5)

        btn3aka = tk.Button(self.frame_bawahAka, text="Reset", font=("Helvetica", 14), bg="red", fg="white",
                           command=self.reset_all)
        btn3aka.pack(side="left", pady=5, padx=5)

        # Perubahan di sini: command diubah ke kembali_ke_menu_utama_dari_skor
        btn4aka = tk.Button(self.frame_bawahAka, text="Kembali", font=("Helvetica", 14), bg="red", fg="white", 
                           command=self.app.kembali_ke_menu_utama_dari_skor)
        btn4aka.pack(side="left", pady=5, padx=10)

        btn0ao = tk.Button(self.frame_bawahAo, text="Show Hide Stopwatch", font=("Helvetica", 14), bg="blue", fg="white")
        btn0ao.pack(side="left", pady=5, padx=15)

        btn1ao = tk.Button(self.frame_bawahAo, text="Shikaku", font=("Helvetica", 14), bg="blue", fg="white")
        btn1ao.pack(side="left", pady=5, padx=10)

        btn2ao = tk.Button(self.frame_bawahAo, text="Kikken", font=("Helvetica", 14), bg="blue", fg="white")
        btn2ao.pack(side="left", pady=5, padx=10)
    
    def done_and_save(self):
        """Simpan data dan reset semua nilai"""
        # Simpan data terlebih dahulu
        duration = f"{self.time_elapsed // 60:02d}:{self.time_elapsed % 60:02d}"
        self.save_to_csv(
            ao_name=self.label_namaAo.cget("text"),
            aka_name=self.label_namaAka.cget("text"),
            duration=duration
        )
        
        # Tampilkan konfirmasi
        messagebox.showinfo("Saved", "Data pertandingan telah disimpan!")
        
        # Reset semua (opsional)
        self.reset_all()
        
    def tampilkan_div(self):
        self.label_div = tk.Label(self.frame_head, text="Division name", bg="black", fg="white", font=("Helvetica", 10))
        self.label_div.pack(pady=1)

        self.label_div1 = tk.Label(self.frame_head, text="Division", bg="black", fg="white", font=("Helvetica", 10))
        self.label_div1.pack(pady=0, padx=70)

        # Frame kiri (Ao)
        frame_ao = tk.Frame(self.frame_head, bg="black")
        frame_ao.pack(side="left", padx=30)

        self.label_divAo = tk.Label(frame_ao, text="Ao", bg="black", fg="blue", font=("Helvetica", 20))
        self.label_divAo.pack(side="left")

        self.label_namaAo = tk.Label(frame_ao, text="Nama Ao", bg="black", fg="white", font=("Helvetica", 14))
        self.label_namaAo.pack(side="left", padx=(10, 5))

        self.entry_ao = tk.Entry(frame_ao, font=("Helvetica", 12), width=10)
        self.entry_ao.pack(side="left", padx=5)

        tk.Button(frame_ao, text="Set", font=("Helvetica", 10), command=self.set_name_ao).pack(side="left")

        # Frame kanan (Aka)
        frame_aka = tk.Frame(self.frame_head, bg="black")
        frame_aka.pack(side="right", padx=30)

        self.label_divAka = tk.Label(frame_aka, text="Aka", bg="black", fg="red", font=("Helvetica", 20))
        self.label_divAka.pack(side="left")

        self.label_namaAka = tk.Label(frame_aka, text="Nama Aka", bg="black", fg="white", font=("Helvetica", 14))
        self.label_namaAka.pack(side="left", padx=(10, 5))

        self.entry_aka = tk.Entry(frame_aka, font=("Helvetica", 12), width=10)
        self.entry_aka.pack(side="left", padx=5)

        tk.Button(frame_aka, text="Set", font=("Helvetica", 10), command=self.set_name_aka).pack(side="left")

    def tampilkan_gambar_flag(self):
        self.photos = []
        img = Image.open("blueflag.png")
        img = img.resize((160, 160))
        photo_flag1 = ImageTk.PhotoImage(img)
        self.photos.append(photo_flag1)

        img2 = Image.open("redflag.png")
        img2 = img2.resize((160, 160))
        photo_flag2 = ImageTk.PhotoImage(img2)
        self.photos.append(photo_flag2)

    def update_score(self, color, amount):
        self.scores[color] += amount
        self.update_display()

    def update_display(self):
        self.label_score_red.config(text=str(int(self.scores['Red'])))
        self.label_score_blue.config(text=str(int(self.scores['Blue'])))

    def start_stopwatch(self):
        if not self.running:
            self.running = True
            self.update_timer()

    def stop_stopwatch(self):
        self.running = False

    def update_timer(self):
        if self.running:
            minutes = self.time_elapsed // 60
            seconds = self.time_elapsed % 60
            self.label_timer_blue.config(text=f"{minutes:02d} : {seconds:02d}")
            self.label_timer_aka.config(text=f"{minutes:02d} : {seconds:02d}")
            self.time_elapsed += 1
            self.root.after(1000, self.update_timer)

    def set_name_ao(self):
        name = self.entry_ao.get().strip()
        if name:
            self.label_namaAo.config(text=name)

    def set_name_aka(self):
        name = self.entry_aka.get().strip()
        if name:
            self.label_namaAka.config(text=name)
            
    def reset_all(self):
        # Reset names (TANPA mengembalikan ke default)
        current_ao_name = self.label_namaAo.cget("text")
        current_aka_name = self.label_namaAka.cget("text")
        
        # Reset scores
        self.scores = {"Red": 0, "Blue": 0}
        self.update_display()
        
        # Get timer value BEFORE resetting
        duration = f"{self.time_elapsed // 60:02d}:{self.time_elapsed % 60:02d}"
        
        # Reset stopwatch
        self.running = False
        self.time_elapsed = 0
        self.label_timer_blue.config(text="00 : 00")
        self.label_timer_aka.config(text="00 : 00")
        
        # Clear entry fields
        self.entry_ao.delete(0, tk.END)
        self.entry_aka.delete(0, tk.END)

    def done_and_save(self):
        """Simpan data tanpa reset"""
        duration = f"{self.time_elapsed // 60:02d}:{self.time_elapsed % 60:02d}"
        self.save_to_csv(
            ao_name=self.label_namaAo.cget("text"),
            aka_name=self.label_namaAka.cget("text"),
            duration=duration
        )
        messagebox.showinfo("Saved", "Data pertandingan telah disimpan!")
        self.stop_stopwatch()  # Hentikan timer tanpa reset
   def save_to_csv(self, ao_name, aka_name, duration):
        filename = "match_data.csv"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        data = {
            "timestamp": timestamp,
            "ao_name": ao_name,
            "aka_name": aka_name,
            "ao_score": self.scores["Blue"],
            "aka_score": self.scores["Red"],
            "duration": duration
        }
        
        try:
            with open(filename, mode='a', newline='', encoding='utf-8') as file:
                writer = csv.DictWriter(file, fieldnames=data.keys())
                if file.tell() == 0:
                    writer.writeheader()
                writer.writerow(data)
        except Exception as e:
            messagebox.showerror("Error", f"Gagal menyimpan: {str(e)}")
        
class AnggotaCard(tk.Frame):
    def __init__(self, master, nama, npm, prodi, gambar_path, on_halaman_utama, on_select_anggota):
        super().__init__(master)
        self.nama = nama
        self.npm = npm
        self.prodi = prodi
        self.gambar_path = gambar_path
        self.on_halaman_utama = on_halaman_utama
        self.on_select_anggota = on_select_anggota
        self.perkenalan()

    def perkenalan(self):
        # Header
        header = tk.Frame(self, bg="steelblue4")
        header.pack(fill="x")
        img = Image.open("image0.png").resize((50,50))
        photo_logo = ImageTk.PhotoImage(img)
        label_logo = tk.Label(header, bg="steelblue4", image=photo_logo)
        label_logo.image = photo_logo
        label_logo.pack(side="left", padx=40, pady=5)
        
        label_title = tk.Label(header, text="GROUP 7 IDENTITY CARD", bg="steelblue4", fg="white", font=("Elephant", 15))
        label_title.pack(side="left", padx=10)
        
        # Main content
        content = tk.Frame(self, bg="white")
        content.pack(fill="both", expand=False)

        content_bottom = tk.Frame(content, bg="steelblue4")
        content_bottom.pack(side= "bottom", fill="both")

        content_left = tk.Frame(content, bg="white")
        content_left.pack(side= "left", fill="both", expand=False)

        content_right = tk.Frame(content, bg="white")
        content_right.pack(side= "left", fill="both", expand=False)
        
        # Image
        img_member = Image.open(self.gambar_path).resize((170,170))
        photo_member = ImageTk.PhotoImage(img_member)
        label_img = tk.Label(content_left, image=photo_member, bg="white")
        label_img.image = photo_member
        label_img.pack(side="left", padx=20, pady=0)
        
        tk.Label(content_right, text="IDENTITY", font=("Elephant", 22), bg="white").pack(anchor="w", pady=8)
        tk.Label(content_right, text=self.nama, font=("Helvetica", 19), bg="white").pack(anchor="w", pady=9)
        tk.Label(content_right, text=self.npm, font=("Helvetica", 17), bg="white").pack(anchor="w", pady=12)
        tk.Label(content_right, text=self.prodi, font=("Helvetica", 17), bg="white").pack(anchor="w", pady=12)

        #foot
        foot = tk.Frame(content_bottom, bg="steelblue4")
        foot.pack(padx=10, pady=20)
         
        # Frame buat semua tombol di bagian bawah
        button_bar = tk.Frame(self)
        button_bar.pack(pady=10)

        # Tombol anggota
        anggota_list = [
            ("Misele Aisya Saram", "2417051017", "Ilmu Komputer", "image1.png"),
            ("Ni Kadek Wahyu F.", "2417051060", "Ilmu Komputer", "image2.png"),
            ("Sindy Meylinda Sari", "2417051028", "Ilmu Komputer", "image4.png"),
            ("Wiyanda Savitri", "2457051007", "Ilmu Komputer", "image3.png"),
        ]

        for i, (nama, npm, prodi, img) in enumerate(anggota_list, 1):
            btn = tk.Button(button_bar, text=f"Member {i}", font=("Helvetica", 12), bg="steelblue4",
                            command=lambda n=nama, np=npm, p=prodi, g=img: self.tampilkan_anggota(n, np, p, g))
            btn.pack(side="left", pady = 50, padx=10)

        # Tombol Kembali
        btn_back = tk.Button(button_bar, text="Menu", font=("Helvetica", 12), bg="steelblue3", command=self.buka_halaman_utama)
        btn_back.pack(side="left", pady = 50, padx=10)

    def tampilkan_anggota(self, nama, npm, prodi, gambar_path):
        self.pack_forget()
        self.on_select_anggota(nama, npm, prodi, gambar_path)

    def buka_halaman_utama(self):
        self.pack_forget()
        self.on_halaman_utama()

class ApkTK:
    def __init__(self, root):
        self.root = root
        self.root.title("Aplikasi Tkinter Sederhana")
        self.root.geometry("500x500")
        self.root.resizable(True, True)

        self.frame_awal = tk.Frame(root, bg="white")
        self.frame_awal.pack(fill="both", expand=True)

        self.tampilkan_gambar()

        self.btn_masuk = tk.Button(
            self.frame_awal,
            text = "Masuk",
            font = ("Helvetica", 14),
            bg = "steelblue4",
            command = self.buka_halaman_utama
        )
        self.btn_masuk.pack(pady = 20)

        self.frame_utama = tk.Frame(root)

    def buka_halaman_utama(self):
        self.frame_awal.pack_forget()
        self.frame_utama = tk.Frame(self.root)
        self.frame_utama.pack(fill="both", expand=True)

        btn_anggota = tk.Button(self.frame_utama, text="Anggota", font=("Helvetica", 14), bg = "steelblue4", 
                               command=lambda: self.tampilkan_anggota("Misele Aisya Saram", "2417051017", "Ilmu Komputer", "image1.png"))
        btn_anggota.pack(pady=20)

        btn_main = tk.Button(self.frame_utama, text="Main fiture", font=("Helvetica", 14), bg = "steelblue4", 
                            command=self.buka_halaman_skor)
        btn_main.pack(pady=20)

        btn_exit = tk.Button(self.frame_utama, text="Keluar", font=("Helvetica", 14), bg = "steelblue4", 
                            command=self.root.destroy)
        btn_exit.pack(pady=10)

    def tampilkan_anggota(self, nama, npm, prodi, gambar_path):
        self.frame_utama.pack_forget()
        self.anggota_card = AnggotaCard(self.root, nama, npm, prodi, gambar_path, self.buka_halaman_utama, self.tampilkan_anggota)
        self.anggota_card.pack(fill="both", expand=True)
